pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'shashank9928/my-app'
        DOCKER_CREDENTIAL_ID = 'dock-creds' // Jenkins credentials ID for Docker Hub
        AWS_CREDENTIALS_ID = 'aws-creds'
        AWS_REGION = 'us-east-1' // Replace with your AWS region
        GIT_CREDENTIALS_ID = 'git-creds'
        CLUSTER_NAME = 'my-cluster' // Replace with your EKS cluster name
        KUBE_DEPLOYMENT_FILE = 'deployment.yaml' // Path to your Kubernetes deployment file in the workspace
        KUBE_SERVICE_FILE = 'service.yaml' // Path to your Kubernetes service file in the workspace
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                git(
                    url: 'https://github.com/shashank6613/ProjectCI-CD.git',
                    branch: 'main',
                    credentialsId: "${GIT_CREDENTIALS_ID}"
                )
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image with the 'latest' tag
                    docker.build("${DOCKER_IMAGE_NAME}:latest")

                    // Optionally, set the 'latest' tag as an environment variable
                    env.DOCKER_IMAGE_TAG = 'latest'
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Login and push Docker image with 'latest' tag
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIAL_ID}") {
                        docker.image("${DOCKER_IMAGE_NAME}:latest").push('latest')
                    }
                }
            }
        }
        stage('Update kubeconfig') {
            steps {
                withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${AWS_REGION}") {
                    script {
                        // Update kubeconfig to use the EKS cluster
                        sh '''
                            aws eks --region ${AWS_REGION} update-kubeconfig --name ${CLUSTER_NAME}
                        '''

                        // Define the Docker image name with the 'latest' tag
                        def dockerImage = "${DOCKER_IMAGE_NAME}:latest"

                        // Update the Kubernetes deployment file with the new Docker image name
                        sh """
                            sed -i 's|image: .*|image: ${dockerImage}|' ${KUBE_DEPLOYMENT_FILE}
                        """
                    }
                }
            }
        }
        stage('Deploy to EKS') {
            steps {
                script {
                    // Apply the Kubernetes Service first
                    sh "kubectl apply -f ${KUBE_SERVICE_FILE}"
                    // Apply the Kubernetes Deployment
                    sh "kubectl apply -f ${KUBE_DEPLOYMENT_FILE}"
                }
            }
        }
    }

    post {
        failure {
            // Optional: Clean up resources if needed
            withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${AWS_REGION}") {
                script {
                    // Stop and remove Docker containers (if any are running)
                    sh '''
                        docker ps -q --filter "ancestor=${DOCKER_IMAGE_NAME}:latest" | xargs -r docker stop
                        docker ps -a -q --filter "ancestor=${DOCKER_IMAGE_NAME}:latest" | xargs -r docker rm
                    '''

                    // Remove Docker image
                    sh '''
                        docker rmi ${DOCKER_IMAGE_NAME}:latest || true
                    '''
                }
            }
        }
    }
}

