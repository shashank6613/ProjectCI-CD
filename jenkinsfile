pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'shashank9928/my-app'
        DOCKER_IMAGE_TAG = 'latest'
        DOCKER_REGISTRY = 'docker.io' // Default Docker Hub
        DOCKER_REGISTRY_CREDENTIALS = 'dock-creds' // Jenkins credentials ID for Docker Hub
        AWS_CREDENTIALS_ID = 'aws-creds'
        AWS_REGION = 'us-east-1' // Replace with your AWS region
        GIT_CREDENTIALS_ID = 'git-creds'
        CLUSTER_NAME = 'my-cluster' // Replace with your EKS cluster name
        KUBE_DEPLOYMENT_FILE = 'deployment.yaml' // Path to your Kubernetes deployment file in the workspace
        KUBE_SERVICE_FILE = 'service.yaml' // Path to your Kubernetes service file in the workspace
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                git( 
                    url: 'https://github.com/shashank6613/ProjectCI-CD.git',
                    branch: 'main',
                    credentialsId: "${GIT_CREDENTIALS_ID}"
                )
            }
        }
        stage('Create EKS Cluster') {
            steps {
                withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                    script {
                        sh '''
                            # Create EKS Cluster
                            eksctl create cluster \
                                --name ${CLUSTER_NAME} \
                                --version 1.30 \
                                --region ${REGION} \
                                --nodegroup-name standard-workers \
                                --node-type t3.medium \
                                --nodes 1 \
                                --nodes-min 1 \
                                --nodes-max 1 \
                                --managed
                        '''
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Define the Docker image name with the latest tag
                    def dockerImage = "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    
                    // Print the Docker image name for debugging
                    echo "Building Docker image: ${dockerImage}"
                    
                    // Build the Docker image
                    sh "docker build -t ${dockerImage} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Define the Docker image name with the latest tag
                    def dockerImage = "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    
                    // Print the Docker image name for debugging
                    echo "Pushing Docker image: ${dockerImage}"
                    
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo $DOCKER_PASSWORD | docker login ${DOCKER_REGISTRY} -u $DOCKER_USERNAME --password-stdin"
                    }

                    // Push the Docker image to Docker Hub
                    sh "docker push ${dockerImage}"
                }
            }
        }

        stage('Update Kubernetes Deployment') {
            steps {
                script {
                    // Update kubeconfig to use the EKS cluster
                    sh "aws eks --region ${AWS_REGION} update-kubeconfig --name ${CLUSTER_NAME}"

                    // Define the Docker image name with the latest tag
                    def dockerImage = "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    
                    // Update the Kubernetes deployment file with the new Docker image name
                    sh """
                        sed -i 's|image: .*|image: ${dockerImage}|' ${KUBE_DEPLOYMENT_FILE}
                    """
                    
                    // Apply the updated Kubernetes deployment file
                    sh "kubectl apply -f ${KUBE_DEPLOYMENT_FILE}"
                }
            }
        }

        stage('Update Kubernetes Service') {
            steps {
                script {
                    // Apply the updated Kubernetes service file
                    sh "kubectl apply -f ${KUBE_SERVICE_FILE}"
                }
            }
        }
    }

    post {
        always {
            // Clean up or notify based on the pipeline status
            echo 'Pipeline execution completed.'
        }
    }
}

