pipeline {
    agent any
    environment {
        AWS_CREDENTIALS_ID = 'aws-creds'
        DOCKER_CREDENTIAL_ID = 'dock-creds'
        CLUSTER_NAME = 'my-cluster'
        REGION = 'us-east-1'
        KUBECONFIG_PATH = '/root/.kube/config'
        ANSIBLE_INVENTORY = 'inventory.ini'
    }
    stages {
        stage('Setup Environment') {
            steps {
                script {
                    // Define the Ansible playbooks
                    def ansiblePlaybooks = [
                        'install_awscli.yaml',
                        'install_eksctl.yaml',
                        'install_kubectl.yaml'
                    ]

                    // Install Ansible (if not already installed)
                    sh '''
                        if ! command -v ansible &> /dev/null
                        then
                            pip install ansible
                        fi
                    '''

                    // Execute the Ansible playbooks
                    for (playbook in ansiblePlaybooks) {
                        sh "ansible-playbook -i ${ANSIBLE_INVENTORY} ${playbook}"
                    }
                }
            }
        }
        stage('Checkout Code') {
            steps {
                // Checkout the code from your Git repository
                git 'https://github.com/shashank6613/ProjectCI-CD.git'
            }
        }
        stage('Create EKS Cluster') {
            steps {
                withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                    script {
                        sh '''
                            # Create EKS Cluster
                            eksctl create cluster \
                                --name ${CLUSTER_NAME} \
                                --version 1.21 \
                                --region ${REGION} \
                                --nodegroup-name standard-workers \
                                --node-type t3.medium \
                                --nodes 2 \
                                --nodes-min 1 \
                                --nodes-max 3 \
                                --managed
                        '''
                    }
                }
            }
        }
        stage('Update kubeconfig') {
            steps {
                withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                    script {
                        sh '''
                            aws eks --region ${REGION} update-kubeconfig --name ${CLUSTER_NAME}
                        '''
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("my-app:${env.BUILD_ID}")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withDockerRegistry([credentialsId: "${DOCKER_CREDENTIAL_ID}", url: 'https://index.docker.io/v1/']) {
                    script {
                        docker.image("my-app:${env.BUILD_ID}").push('latest')
                    }
                }
            }
        }
        stage('Deploy to EKS') {
            steps {
                script {
                    sh '''
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                    '''
                }
            }
        }
    }
    post {
        failure {
            // Optional: Clean up the cluster if needed
            withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                script {
                    sh '''
                        eksctl delete cluster --name ${CLUSTER_NAME} --region ${REGION}
                    '''
                }
            }
        }
        always {
            if (currentBuild.currentResult == 'FAILURE') {
                    echo "Pipeline failed, performing failure-specific actions."
            }
            if (currentBuild.currentResult != 'FAILURE') {
                    echo "Pipeline successfully executed, You've done it Man!"
            }
          }  
        }
    }

